{"version":3,"file":"rum.derived_atom.js","sources":["rum/derived_atom.cljc"],"mappings":"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","names":["var_args","G__20976","rum.derived-atom/derived-atom","js/Error","refs","key","f","rum.derived_atom.derived_atom.cljs$core$IFn$_invoke$arity$4","opts","map__20981","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$3","ref","check-equals?","recalc","G__20983","cljs.core/count","vec__20989","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","a","G__20992","cljs.core/deref","vec__20997","b","G__21000","G__21001","vec__21002","c","G__21005","G__21006","G__21007","cljs.core.map.cljs$core$IFn$_invoke$arity$2","sink","G__21008","cljs.core/reset!","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","watch","_","new-val","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","seq__21012","cljs.core/seq","chunk__21013","count__21014","i__21015","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","cljs.core/add-watch"],"sourcesContent":["(ns ^:no-doc rum.derived-atom)\n\n\n(defn derived-atom\n  ([refs key f]\n    (derived-atom refs key f {}))\n  ([refs key f opts]\n    (let [{ :keys [ref check-equals?]\n            :or { check-equals? true }} opts\n          recalc (case (count refs)\n                   1 (let [[a] refs] #(f @a))\n                   2 (let [[a b] refs] #(f @a @b))\n                   3 (let [[a b c] refs] #(f @a @b @c))\n                   #(apply f (map deref refs)))\n          sink   (if ref\n                   (doto ref (reset! (recalc)))\n                   (atom (recalc)))\n          watch  (if check-equals?\n                   (fn [_ _ _ _]\n                     (let [new-val (recalc)]\n                       (when (not= @sink new-val)\n                         (reset! sink new-val))))\n                   (fn [_ _ _ _]\n                     (reset! sink (recalc))))]\n      (doseq [ref refs]\n        (add-watch ref key watch))\n      sink)))\n"]}