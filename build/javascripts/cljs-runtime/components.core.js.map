{"version":3,"sources":["components/core.cljs"],"mappings":";;;AAIA,AAAA,AAAMA,AAAaC;AAAnB,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAEgB,AAACC,AAAMD,AAAME;AAF7B,AAAA,AAGW,AAAA,AAAA,AAAAC,AAAuBH;;AAElC,AAAA,AAAMI;AAAN,AACE,AAAMJ,AAAM,AAAA,AAACK;AAAb,AACE;;AAAA,AAAA,AAAA,AAAA,AACSN,AAAYC;;;;AAEzB,AAAA,AAAMM;AAAN,AACE,AAAA,AAACC,AACCH,AACD,AAAA,AACCI;;AAGJ,AAAA,AAAeC;AAAf,AACE,AAACH","names":["components.core/click-testr","count","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","cljs.core/deref","components.core/app","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","components.core/mount","reagent.core.render.cljs$core$IFn$_invoke$arity$2","js/document","components.core/init"],"sourcesContent":["(ns components.core\n  (:require\n   [reagent.core :as r :refer [atom]]))\n\n(defn click-testr [count]\n  [:div.bg-blue.p-10.white.has-pointer.text-center.has-cursor\n    {:on-click #(swap! count inc)}\n    [:code (str \"Click me ---> \" @count)]])\n\n(defn app []\n  (let [count (atom 0)]\n    (fn []\n      [:div [click-testr count]])))\n\n(defn mount []\n  (r/render\n   [app]\n   (.getElementById\n    js/document\n    \"component-example-container\")))\n\n(defn ^:export init []\n  (mount))\n"]}