{"version":3,"file":"rum.core.js","sources":["rum/core.cljs"],"mappings":"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","names":["rum.core/state","comp","G__22018","G__22019","goog.object/get","rum.core/extend!","obj","props","seq__22021","cljs.core/seq","chunk__22023","count__22024","i__22025","vec__22030","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__22036","cljs.core/first","cljs.core/next","k","v","G__22033","G__22034","G__22035","G__22039","G__22040","G__22041","goog.object/set","cljs.core/name","cljs.core/clj->js","rum.core/build-class","render","mixins","display-name","init","rum.util/collect","will-mount","rum.util/collect*","wrap-render","wrapped-render","p1__22078#","p2__22075#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","did-mount","did-remount","should-update","will-update","did-update","did-catch","will-unmount","child-context","class-props","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/merge","static-props","ctor","this","G__22119","G__22120","G__22121","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","rum.util.call_all.cljs$core$IFn$_invoke$arity$variadic","cljs.core/volatile!","js/React.Component","_","goog/inherits","prototype","cljs.core/empty?","G__22125","G__22126","G__22127","cljs.core/-vreset!","cljs.core/-deref","rum.util/call-all","G__22128","G__22129","G__22130","G__22131","G__22132","G__22133","next-props","cljs.core/deref","old-state","state","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","next-state","p1__22080#","p2__22079#","G__22134","G__22135","G__22136","new-state","or__3949__auto__","p1__22081#","cljs.core/some","G__22139","G__22140","G__22141","G__22142","G__22143","G__22144","vec__22147","dom","G__22150","cljs.core/vreset!","G__22151","G__22152","G__22153","G__22157","G__22158","G__22159","error","info","G__22161","G__22162","G__22163","G__22175","G__22176","G__22177","cljs.core.transduce.cljs$core$IFn$_invoke$arity$4","p1__22085#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","rum.core/build-ctor","class","key-fn","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","js/React.createElement","cljs.core/with-meta","rum.core/build-defc","render-body","rum.core/build-defcs","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","rum.core/build-defcc","rum.core/schedule","p1__22339#","and__3938__auto__","js/window","js/window.requestAnimationFrame","js/window.webkitRequestAnimationFrame","js/window.mozRequestAnimationFrame","js/window.msRequestAnimationFrame","js/setTimeout","rum.core/batch","js/ReactNative","js/ReactNative.unstable_batchedUpdates","js/ReactDOM","js/ReactDOM.unstable_batchedUpdates","f","a","rum.core/empty-queue","rum.core/render-queue","rum.core/render-all","queue","seq__22347","chunk__22349","count__22350","i__22351","cljs.core/not","rum.core/render","rum.core/request-render","component","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","rum.core/mount","element","node","js/ReactDOM.render","rum.core/unmount","js/ReactDOM.unmountComponentAtNode","rum.core/hydrate","js/ReactDOM.hydrate","rum.core/portal","js/ReactDOM.createPortal","rum.core/with-key","key","js/React.cloneElement","rum.core/with-ref","ref","rum.core/dom-node","js/ReactDOM.findDOMNode","rum.core/ref","rum.core/ref-node","rum.core/static","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","var_args","G__22387","rum.core/local","js/Error","initial","rum.core.local.cljs$core$IFn$_invoke$arity$2","local-state","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/add-watch","rum.core/reactive","cljs.core/random-uuid","render-fn","*reactions*22390","rum.core/*reactions*","vec__22394","old-reactions","new-reactions","seq__22397","chunk__22398","count__22399","i__22400","cljs.core/contains?","cljs.core/remove-watch","seq__22401","chunk__22402","count__22403","i__22404","seq__22405","chunk__22406","count__22407","i__22408","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","rum.core/react","rum.core/derived-atom","rum.derived-atom/derived-atom","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","rum.core/cursor-in","p__22492","map__22494","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","seq22488","G__22489","G__22490","self__4518__auto__","path","options","rum.cursor/Cursor","cljs.core.into.cljs$core$IFn$_invoke$arity$2","rum.core/cursor","seq22503","G__22504","G__22505","cljs.core.apply.cljs$core$IFn$_invoke$arity$4"],"sourcesContent":["(ns rum.core\n  (:refer-clojure :exclude [ref])\n  (:require-macros rum.core)\n  (:require\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.object :as gobj]\n    [sablono.core]\n    [rum.cursor :as cursor]\n    [rum.util :as util :refer [collect collect* call-all]]\n    [rum.derived-atom :as derived-atom]))\n\n\n(defn state\n  \"Given React component, returns Rum state associated with it.\"\n  [comp]\n  (gobj/get (.-state comp) \":rum/state\"))\n\n\n(defn- extend! [obj props]\n  (doseq [[k v] props\n          :when (some? v)]\n    (gobj/set obj (name k) (clj->js v))))\n\n\n(defn- build-class [render mixins display-name]\n  (let [init           (collect   :init mixins)             ;; state props -> state\n        will-mount     (collect* [:will-mount               ;; state -> state\n                                  :before-render] mixins)   ;; state -> state\n        render         render                               ;; state -> [dom state]\n        wrap-render    (collect   :wrap-render mixins)      ;; render-fn -> render-fn\n        wrapped-render (reduce #(%2 %1) render wrap-render)\n        did-mount      (collect* [:did-mount                ;; state -> state\n                                  :after-render] mixins)    ;; state -> state\n        did-remount    (collect   :did-remount mixins)      ;; old-state state -> state\n        should-update  (collect   :should-update mixins)    ;; old-state state -> boolean\n        will-update    (collect* [:will-update              ;; state -> state\n                                  :before-render] mixins)   ;; state -> state\n        did-update     (collect* [:did-update               ;; state -> state\n                                  :after-render] mixins)    ;; state -> state\n        did-catch      (collect   :did-catch mixins)        ;; state error info -> state\n        will-unmount   (collect   :will-unmount mixins)     ;; state -> state\n        child-context  (collect   :child-context mixins)    ;; state -> child-context\n        class-props    (reduce merge (collect :class-properties mixins))  ;; custom prototype properties and methods\n        static-props   (reduce merge (collect :static-properties mixins)) ;; custom static properties and methods\n\n        ctor           (fn [props]\n                         (this-as this\n                           (gobj/set this \"state\"\n                             #js {\":rum/state\"\n                                  (-> (gobj/get props \":rum/initial-state\")\n                                      (assoc :rum/react-component this)\n                                      (call-all init props)\n                                      volatile!)})\n                           (.call js/React.Component this props)))\n        _              (goog/inherits ctor js/React.Component)\n        prototype      (gobj/get ctor \"prototype\")]\n\n    (when-not (empty? will-mount)\n      (gobj/set prototype \"componentWillMount\"\n        (fn []\n          (this-as this\n            (vswap! (state this) call-all will-mount)))))\n\n    (when-not (empty? did-mount)\n      (gobj/set prototype \"componentDidMount\"\n        (fn []\n          (this-as this\n            (vswap! (state this) call-all did-mount)))))\n\n    (gobj/set prototype \"componentWillReceiveProps\"\n      (fn [next-props]\n        (this-as this\n          (let [old-state  @(state this)\n                state      (merge old-state\n                                  (gobj/get next-props \":rum/initial-state\"))\n                next-state (reduce #(%2 old-state %1) state did-remount)]\n            ;; allocate new volatile so that we can access both old and new states in shouldComponentUpdate\n            (.setState this #js {\":rum/state\" (volatile! next-state)})))))\n\n    (when-not (empty? should-update)\n      (gobj/set prototype \"shouldComponentUpdate\"\n        (fn [next-props next-state]\n            (this-as this\n              (let [old-state @(state this)\n                    new-state @(gobj/get next-state \":rum/state\")]\n                (or (some #(% old-state new-state) should-update) false))))))\n    \n    (when-not (empty? will-update)\n      (gobj/set prototype \"componentWillUpdate\"\n        (fn [_ next-state]\n          (this-as this\n            (let [new-state (gobj/get next-state \":rum/state\")]\n              (vswap! new-state call-all will-update))))))\n    \n    (gobj/set prototype \"render\"\n      (fn []\n        (this-as this\n          (let [state (state this)\n                [dom next-state] (wrapped-render @state)]\n            (vreset! state next-state)\n            dom))))\n\n    (when-not (empty? did-update)\n      (gobj/set prototype \"componentDidUpdate\"\n        (fn [_ _]\n          (this-as this\n            (vswap! (state this) call-all did-update)))))\n\n    (when-not (empty? did-catch)\n      (gobj/set prototype \"componentDidCatch\"\n        (fn [error info]\n          (this-as this\n            (vswap! (state this) call-all did-catch error {:rum/component-stack (gobj/get info \"componentStack\")})\n            (.forceUpdate this)))))\n\n    (gobj/set prototype \"componentWillUnmount\"\n      (fn []\n        (this-as this\n          (when-not (empty? will-unmount)\n            (vswap! (state this) call-all will-unmount))\n          (gobj/set this \":rum/unmounted?\" true))))\n\n    (when-not (empty? child-context)\n      (gobj/set prototype \"getChildContext\"\n        (fn []\n          (this-as this\n            (let [state @(state this)]\n              (clj->js (transduce (map #(% state)) merge {} child-context)))))))\n    \n    (extend! prototype class-props)\n    (gobj/set ctor \"displayName\" display-name)\n    (extend! ctor static-props)\n    ctor))\n\n\n(defn- build-ctor [render mixins display-name]\n  (let [class  (build-class render mixins display-name)\n        key-fn (first (collect :key-fn mixins))\n        ctor   (if (some? key-fn)\n                 (fn [& args]\n                   (let [props #js { \":rum/initial-state\" { :rum/args args }\n                                     \"key\" (apply key-fn args) }]\n                     (js/React.createElement class props)))\n                 (fn [& args]\n                   (let [props #js { \":rum/initial-state\" { :rum/args args }}] \n                     (js/React.createElement class props))))]\n    (with-meta ctor { :rum/class class })))\n\n\n(defn ^:no-doc build-defc [render-body mixins display-name]\n  (if (empty? mixins)\n    (let [class (fn [props]\n                  (apply render-body (aget props \":rum/args\")))\n          _     (aset class \"displayName\" display-name)\n          ctor  (fn [& args]\n                  (js/React.createElement class #js { \":rum/args\" args }))]\n      (with-meta ctor { :rum/class class }))\n    (let [render (fn [state] [(apply render-body (:rum/args state)) state])]\n      (build-ctor render mixins display-name))))\n\n\n(defn ^:no-doc build-defcs [render-body mixins display-name]\n  (let [render (fn [state] [(apply render-body state (:rum/args state)) state])]\n    (build-ctor render mixins display-name)))\n\n\n(defn ^:no-doc build-defcc [render-body mixins display-name]\n  (let [render (fn [state] [(apply render-body (:rum/react-component state) (:rum/args state)) state])] \n    (build-ctor render mixins display-name)))\n\n\n;; render queue\n\n(def ^:private schedule\n  (or (and (exists? js/window)\n           (or js/window.requestAnimationFrame\n               js/window.webkitRequestAnimationFrame\n               js/window.mozRequestAnimationFrame\n               js/window.msRequestAnimationFrame))\n    #(js/setTimeout % 16)))\n\n\n(def ^:private batch\n  (or (when (exists? js/ReactNative) js/ReactNative.unstable_batchedUpdates)\n      (when (exists? js/ReactDOM) js/ReactDOM.unstable_batchedUpdates)\n      (fn [f a] (f a))))\n\n\n(def ^:private empty-queue [])\n(def ^:private render-queue (volatile! empty-queue))\n\n\n(defn- render-all [queue]\n  (doseq [comp queue\n          :when (not (gobj/get comp \":rum/unmounted?\"))]\n    (.forceUpdate comp)))\n\n\n(defn- render []\n  (let [queue @render-queue]\n    (vreset! render-queue empty-queue)\n    (batch render-all queue)))\n\n\n(defn request-render\n  \"Schedules react component to be rendered on next animation frame.\"\n  [component]\n  (when (empty? @render-queue)\n    (schedule render))\n  (vswap! render-queue conj component))\n\n\n(defn mount\n  \"Add element to the DOM tree. Idempotent. Subsequent mounts will just update element.\"\n  [element node]\n  (js/ReactDOM.render element node)\n  nil)\n\n\n(defn unmount\n  \"Removes component from the DOM tree.\"\n  [node]\n  (js/ReactDOM.unmountComponentAtNode node))\n\n\n(defn hydrate\n  \"Same as [[mount]] but must be called on DOM tree already rendered by a server via [[render-html]].\"\n  [element node]\n  (js/ReactDOM.hydrate element node))\n\n\n(defn portal\n  \"Render `element` in a DOM `node` that is ouside of current DOM hierarchy.\"\n  [element node]\n  (js/ReactDOM.createPortal element node))\n\n\n;; initialization\n\n(defn with-key\n  \"Adds React key to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-key \\\"abc\\\")\n       (rum/mount js/document.body))\n   ```\"\n  [element key]\n  (js/React.cloneElement element #js { \"key\" key } nil))\n\n\n(defn with-ref\n  \"Adds React ref (string or callback) to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-ref \\\"abc\\\")\n       (rum/mount js/document.body))\n   ```\"\n  [element ref]\n  (js/React.cloneElement element #js { \"ref\" ref } nil))\n\n\n(defn dom-node\n  \"Given state, returns top-level DOM node of component. Call it during lifecycle callbacks. Can\u2019t be called during render.\"\n  [state]\n  (js/ReactDOM.findDOMNode (:rum/react-component state)))\n\n\n(defn ref\n  \"Given state and ref handle, returns React component.\"\n  [state key]\n  (-> state :rum/react-component (aget \"refs\") (aget (name key))))\n\n\n(defn ref-node\n  \"Given state and ref handle, returns DOM node associated with ref.\"\n  [state key]\n  (js/ReactDOM.findDOMNode (ref state (name key))))\n\n\n;; static mixin\n\n(def static\n  \"Mixin. Will avoid re-render if none of component\u2019s arguments have changed. Does equality check (`=`) on all arguments.\n  \n   ```\n   (rum/defc label < rum/static\n     [text]\n     [:div text])\n     \n   (rum/mount (label \\\"abc\\\") js/document.body)\n\n   ;; def != abc, will re-render\n   (rum/mount (label \\\"def\\\") js/document.body)\n\n   ;; def == def, won\u2019t re-render\n   (rum/mount (label \\\"def\\\") js/document.body)\n   ```\"\n  { :should-update\n    (fn [old-state new-state]\n      (not= (:rum/args old-state) (:rum/args new-state))) })\n\n\n;; local mixin\n\n(defn local\n  \"Mixin constructor. Adds an atom to component\u2019s state that can be used to keep stuff during component\u2019s lifecycle. Component will be re-rendered if atom\u2019s value changes. Atom is stored under user-provided key or under `:rum/local` by default.\n  \n   ```\n   (rum/defcs counter < (rum/local 0 :cnt)\n     [state label]\n     (let [*cnt (:cnt state)]\n       [:div {:on-click (fn [_] (swap! *cnt inc))}\n         label @*cnt]))\n   \n   (rum/mount (counter \\\"Click count: \\\"))\n   ```\"\n  ([initial] (local initial :rum/local))\n  ([initial key]\n    { :will-mount\n      (fn [state]\n        (let [local-state (atom initial)\n              component   (:rum/react-component state)]\n          (add-watch local-state key\n            (fn [_ _ _ _]\n              (request-render component)))\n          (assoc state key local-state))) }))\n\n\n;; reactive mixin\n\n(def ^:private ^:dynamic *reactions*)\n\n\n(def reactive\n  \"Mixin. Works in conjunction with [[react]].\n  \n   ```\n   (rum/defc comp < rum/reactive\n     [*counter]\n     [:div (rum/react counter)])\n\n   (def *counter (atom 0))\n   (rum/mount (comp *counter) js/document.body)\n   (swap! *counter inc) ;; will force comp to re-render\n   ```\"\n  { :init\n    (fn [state props]\n      (assoc state :rum.reactive/key (random-uuid)))\n    :wrap-render\n    (fn [render-fn]\n      (fn [state]\n        (binding [*reactions* (volatile! #{})]\n          (let [comp             (:rum/react-component state)\n                old-reactions    (:rum.reactive/refs state #{})\n                [dom next-state] (render-fn state)\n                new-reactions    @*reactions*\n                key              (:rum.reactive/key state)]\n            (doseq [ref old-reactions]\n              (when-not (contains? new-reactions ref)\n                (remove-watch ref key)))\n            (doseq [ref new-reactions]\n              (when-not (contains? old-reactions ref)\n                (add-watch ref key\n                  (fn [_ _ _ _]\n                    (request-render comp)))))\n            [dom (assoc next-state :rum.reactive/refs new-reactions)]))))\n    :will-unmount\n    (fn [state]\n      (let [key (:rum.reactive/key state)]\n        (doseq [ref (:rum.reactive/refs state)]\n          (remove-watch ref key)))\n      (dissoc state :rum.reactive/refs :rum.reactive/key)) })\n\n\n(defn react\n  \"Works in conjunction with [[reactive]] mixin. Use this function instead of `deref` inside render, and your component will subscribe to changes happening to the derefed atom.\"\n  [ref]\n  (assert *reactions* \"rum.core/react is only supported in conjunction with rum.core/reactive\")\n  (vswap! *reactions* conj ref)\n  @ref)\n\n\n;; derived-atom\n\n(def ^{:style/indent 2\n       :arglists '([refs key f] [refs key f opts])\n       :doc \"Use this to create \u201cchains\u201d and acyclic graphs of dependent atoms.\n   \n             [[derived-atom]] will:\n          \n             - Take N \u201csource\u201d refs.\n             - Set up a watch on each of them.\n             - Create \u201csink\u201d atom.\n             - When any of source refs changes:\n                - re-run function `f`, passing N dereferenced values of source refs.\n                - `reset!` result of `f` to the sink atom.\n             - Return sink atom.\n\n             Example:\n\n             ```\n             (def *a (atom 0))\n             (def *b (atom 1))\n             (def *x (derived-atom [*a *b] ::key\n                       (fn [a b]\n                         (str a \\\":\\\" b))))\n             \n             (type *x) ;; => clojure.lang.Atom\n             (deref *x) ;; => \\\"0:1\\\"\n             \n             (swap! *a inc)\n             (deref *x) ;; => \\\"1:1\\\"\n             \n             (reset! *b 7)\n             (deref *x) ;; => \\\"1:7\\\"\n             ```\n\n             Arguments:\n          \n             - `refs` - sequence of source refs,\n             - `key`  - unique key to register watcher, same as in `clojure.core/add-watch`,\n             - `f`    - function that must accept N arguments (same as number of source refs) and return a value to be written to the sink ref. Note: `f` will be called with already dereferenced values,\n             - `opts` - optional. Map of:\n               - `:ref` - use this as sink ref. By default creates new atom,\n               - `:check-equals?` - Defaults to `true`. If equality check should be run on each source update: `(= @sink (f new-vals))`. When result of recalculating `f` equals to the old value, `reset!` won\u2019t be called. Set to `false` if checking for equality can be expensive.\"}\n  derived-atom derived-atom/derived-atom)\n\n\n;; cursors\n\n(defn cursor-in\n  \"Given atom with deep nested value and path inside it, creates an atom-like structure\n   that can be used separately from main atom, but will sync changes both ways:\n  \n   ```\n   (def db (atom { :users { \\\"Ivan\\\" { :age 30 }}}))\n   \n   (def ivan (rum/cursor db [:users \\\"Ivan\\\"]))\n   (deref ivan) ;; => { :age 30 }\n   \n   (swap! ivan update :age inc) ;; => { :age 31 }\n   (deref db) ;; => { :users { \\\"Ivan\\\" { :age 31 }}}\n   \n   (swap! db update-in [:users \\\"Ivan\\\" :age] inc)\n   ;; => { :users { \\\"Ivan\\\" { :age 32 }}}\n   \n   (deref ivan) ;; => { :age 32 }\n   ```\n  \n   Returned value supports `deref`, `swap!`, `reset!`, watches and metadata.\n  \n   The only supported option is `:meta`\"\n  [ref path & {:as options}]\n  (if (instance? cursor/Cursor ref)\n    (cursor/Cursor. (.-ref ref) (into (.-path ref) path) (:meta options))\n    (cursor/Cursor. ref path (:meta options))))\n\n\n(defn cursor\n  \"Same as [[cursor-in]] but accepts single key instead of path vector.\"\n  [ref key & options]\n  (apply cursor-in ref [key] options))\n"]}